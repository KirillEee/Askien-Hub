local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
local items = {
  "Lucky Potion",
  "Speed Potion",
  "Coin",
  "Gilded Coin",
  "Fortune Potion I",
  "Fortune Potion II",
  "Fortune Potion III",
  "Haste Potion I",
  "Haste Potion II",
  "Haste Potion III"
}
getgenv().AutoWalking = false
getgenv().WebhookURL = nil
getgenv().WEBHOOK_BiomeNotifier = false
getgenv().WEBHOOK_ItemNotifier = false
getgenv().ToUse = {}
local autouse = false
getgenv().AutoWalking = AutoWalking
getgenv().WebhookURL = WebhookURL or nil
getgenv().WEBHOOK_BiomeNotifier = WEBHOOK_BiomeNotifier
getgenv().WEBHOOK_ItemNotifier 	= WEBHOOK_ItemNotifier
getgenv().ToUse = ToUse
local PathfindingService, RunService, TweenService, ReplicatedStorage, HttpService = game:GetService("PathfindingService"), game:GetService("RunService"), game:GetService("TweenService"), game:GetService("ReplicatedStorage"), game:GetService("HttpService")
local Path, Visualization, Pathfinding_Assist = PathfindingService:CreatePath({
  AgentRadius = 1.5,
  AgentHeight = 6.5,
  WaypointSpacing = 6,
  AgentCanClimb = true
}), Instance.new("Folder", workspace), Instance.new("Folder", workspace)
Visualization.Name = "__Pathfinding.Visualization"
Pathfinding_Assist.Name = "__Pathfinding.Assist"

local DroppedItems, BuffGivers, AntiFall, CaveTeleporter, Modules = workspace.DroppedItems, workspace.Map.BuffGivers, workspace.SaftyNet:WaitForChild("antiFall"), workspace.CaveMap.CaveExit.Teleporter, ReplicatedStorage.Modules
local BasicBlessing = BuffGivers["Basic Blessing"]

local InventoryModule = Modules.Inventory
local UseItem = InventoryModule.UseItem

local Player = game:GetService("Players").LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid, HumanoidRootPart = Character:WaitForChild("Humanoid"), Character.HumanoidRootPart

local NewInventory = Player.PlayerGui.MainInterface.NewInventory
local Items = NewInventory.Items.ItemGrid.ScrollingFrame

local ServerInfo:Configuration = ReplicatedStorage.ServerInfo
local CurrentBiome = ServerInfo:GetAttribute("CurrentBiome")

local _request

if not pcall(function()
_request = request or http_request or http.request
end) then warn("REQUEST NOT SUPPORTED") _request = function() end end

local function sendToWebhook(data, s)
  if not WebhookURL or WebhookURL == "" or WebhookURL == " " then return elseif s == "biome" and not WEBHOOK_BiomeNotifier then return elseif s == "item" and not WEBHOOK_ItemNotifier then return end

  task.spawn(function()
  _request({
    Url = WebhookURL,
    Method = "POST",
    Headers = {
      ["Content-Type"] = "application/json"
    },
    Body = HttpService:JSONEncode({
      ["content"] = data.text or "",
      ["embeds"] = data.title and {{
        ["title"] = data.title or "",
        ["description"] = data.description or "",
        ["type"] = "rich",
        ["color"] = data.color or tonumber(0xffffff),
        ["fields"] = data.fields or {}
      }} or nil
    })
  })
  end)
end

function getstuff(instance, indent, ischild)
  indent = indent or ""
  if not ischild then warn(instance.Name .. " : " .. instance.ClassName) end
  if #instance:GetChildren() >= 1 then
    for i, child in instance:GetChildren() do
      getstuff(child, indent .. "     ", true)
    end
  end
end

local AutoWalk = setmetatable({
  PathfindingAssist = {
    {
      CFrame.new(244.096497, 99.3843384, 143.51889, 0, 0, -1, -0.755624592, 0.655004859, 0, 0.655004859, 0.755624592, 0),
      Vector3.new(7.63350772857666, 0.05000000074505806, 48.8070068359375)
    },
    {
      CFrame.new(214.192322, 87.1541138, 211.773911, -0.251092404, -0.0627095103, -0.965929627, -0.242304355, 0.9702003, 0, 0.937145233, 0.234048977, -0.258804709),
      Vector3.new(9.246000289916992, 0.05000000074505806, 5)
    },
    {
      CFrame.new(205.508484, 91.0983276, 239.854401, 0.563070774, 0.085486345, 0.82197541, -0.24144417, 0.968256056, 0.0646947771, -0.790351927, -0.234888896, 0.565836728),
      Vector3.new(16.002593994140625, 0.05000000074505806, 7.500058174133301)
    },
    {
      CFrame.new(188.170227, 92.6884079, 255.952866, -0.155560791, -0.0771124959, -0.984811902, -0.44413349, 0.895960569, 0, 0.88235265, 0.437387943, -0.17362459),
      Vector3.new(14.482189178466797, 0.05000000074505806, 8.999921798706055)
    },
    {
      CFrame.new(240.869995, 88.8429413, 183.012131, 0.936329186, 0.351123452, 0, -0.351123452, 0.936329186, 0, 0, 0, 1),
      Vector3.new(8.5440034866333, 0.05000000074505806, 9.246002197265625)
    },
    {
      CFrame.new(205.192993, 112.227013, 75.25, 0, 0, -1, 0, 1, 0, 1, 0, 0),
      Vector3.new(14.499996185302734, 4.050030708312988, 11)
    },
    {
      CFrame.new(412.035431, 139.964554, 93.75, -0.707105517, 0.70710808, 0, -0.70710808, -0.707105517, 0, 0, 0, 1),
      Vector3.new(12.02083683013916, 5.050000190734863, 6.5)
    },
    {
      CFrame.new(286.121552, 112.982407, 124.193054, 1, 0, 0, 0, 1, 0, 0, 0, 1),
      Vector3.new(10.642915725708008, 20.585777282714844, 9.386124610900879)
    }
  },
  Teleports = {
    ["Spawn"] = {
      AntiFall,
      Vector3.new(236, 105, 62)
    },
    ["Cave Entrance"]  = {
      CaveTeleporter,
      Vector3.new(422, 132, 98)
    }
  },
  TouchPart = function(self, Part)
  firetouchinterest(HumanoidRootPart, Part, 0)
  task.wait(.01)
  firetouchinterest(HumanoidRootPart, Part, 1)
  end,
  AddToQueue = function(self, Destination)
  if type(Destination) == "vector" then
    table.insert(self.Queue, Destination)
  else
    task.wait(0.15)
    local MainPart:Model
    if Destination:IsA("Model") then
      for _, descendant in Destination:GetDescendants() do
        if not descendant:IsA("ProximityPrompt") then continue end
        MainPart = descendant.Parent
      end
      if MainPart:IsA("Model") then
        local primaryPart = MainPart.PrimaryPart or MainPart:FindFirstChildOfClass("MeshPart") or MainPart:FindFirstChildOfClass("Part") or MainPart:FindFirstChildOfClass("BasePart")
        MainPart:FindFirstChildOfClass("ProximityPrompt").Parent = primaryPart
        MainPart = primaryPart
      end
    elseif Destination:FindFirstChildOfClass("ProximityPrompt") then
      MainPart = Destination
    end
    local Success = pcall(function()
    MainPart.Position = MainPart.Position
    end)
    if Success then
      table.insert(self.Queue, MainPart or Destination)
    else
      getstuff(Destination)
    end
  end
  end,
  SortByClosest = function(self)
  local Closest, NewQueue, HRPosition = {}, {}, HumanoidRootPart.Position
  for _, Destination in self.Queue do
    if type(Destination) == "vector" then
      table.insert(Closest, (HRPosition - Destination).Magnitude)
    else
      table.insert(Closest, (HRPosition - Destination.Position).Magnitude)
    end
    end table.sort(Closest)
    for i, Distance in Closest do
      for _, Destination in self.Queue do
        local distance
        if type(Destination) == "vector" then
          distance = (HRPosition - Destination).Magnitude
        else
          distance = (HRPosition - Destination.Position).Magnitude
        end
        if distance == Distance then
          table.insert(NewQueue, Destination)
        end
      end
    end
    self.Queue = NewQueue
    Closest = nil
    NewQueue = nil gcinfo()
    end,
    FireAllProximityPrompts = function(self)
    for _, Item in DroppedItems:GetChildren() do
      for _, Descendant in Item:GetDescendants() do
        if not Descendant:IsA("ProximityPrompt") then continue end
        task.spawn(function()
        fireproximityprompt(Descendant, 1)
        end)
      end
    end
    end,
    ClearVisualization = function(self)
    for _, VisualizationPart in Visualization:GetChildren() do
      VisualizationPart:Destroy()
    end
    end,
    FollowPath = function(self, Destination, Yield, Item, t)
    Path:ComputeAsync(HumanoidRootPart.Position, Destination)
    self:ClearVisualization()
    local Nodes, Timeouts = Path:GetWaypoints(), 0
    if #Nodes <= 4 then return end
    for i, Node in Nodes do
      local Part = Instance.new("Part", Visualization)
      Part.Name = i
      Part.Shape = Enum.PartType.Ball
      Part.Material = Enum.Material.ForceField
      Part.Color = Color3.fromRGB(170, 0, 255)
      Part.Size = Vector3.new(0.65, 0.65, 0.65)
      Part.Position = Node.Position
      Part.Anchored = true
      Part.CanCollide = false
      Part.Transparency = 1
    end
    for i, Node in Nodes do
      if not AutoWalking then return end
      if Yield and (not Item:FindFirstAncestor("DroppedItems")) then return end
      local TimeoutEvent, VisualizationPart = Instance.new("BindableEvent"), Visualization[i]
      delay(1, function()
      if TimeoutEvent then TimeoutEvent:Fire(0) end
      end)
      if Node.Action == Enum.PathWaypointAction.Jump then
        self.Jumping = true
        delay(.5, function()
        self.Jumping = false
        end)
      end
      Humanoid:MoveTo(Node.Position)
      Humanoid.MoveToFinished:Connect(function()
      if TimeoutEvent then TimeoutEvent:Fire(1) end
      end)
      local Result = TimeoutEvent.Event:Wait()
      TimeoutEvent:Destroy() TimeoutEvent = nil gcinfo()
      if Result == 0 then
        Timeouts += 1
        Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        if t and Timeouts >= 3 then
          self:TouchPart(self.Teleports["Spawn"][1])
          task.wait(1)
          return self.FollowPath(self, Destination, Yield, Item)
        elseif Timeouts >= 3 then
          return self.FollowPath(self, Destination, Yield, Item, Timeouts)
        end
      end
      if VisualizationPart then
        VisualizationPart:Destroy()
      end
    end
    gcinfo() return self.FollowPath(self, Destination, Yield, Item)
    end,
  }, {
  __call = function(self)
  self.Queue = {}
  self.Jumping = false
  for _, Properties in self.PathfindingAssist do
    local AssistPart = Instance.new("Part", Pathfinding_Assist)
    AssistPart.CFrame = Properties[1]
    AssistPart.Size = Properties[2]
    AssistPart.Material = Enum.Material.ForceField
    AssistPart.Shape = Enum.PartType.Block
    AssistPart.Anchored = true
    AssistPart.Color = Color3.fromRGB(85, 85, 255)
    AssistPart.Transparency = 1
    AssistPart.CanCollide = true
    end gcinfo()
    task.spawn(function()
    while task.wait(.1) do
      if #self.Queue < 1 or (not AutoWalking) then continue end
      self:SortByClosest()
      for i, Destination in self.Queue do
        if type(Destination) == "vector" then
          local Default, _Spawn, Cave = (HumanoidRootPart.Position - Destination).Magnitude, (self.Teleports["Spawn"][2] - Destination).Magnitude,
          (self.Teleports["Cave Entrance"][2] - Destination).Magnitude
          if _Spawn < Default or Cave < Default then
            if _Spawn <= Cave then
              self:TouchPart(self.Teleports["Spawn"][1])
            else
              self:TouchPart(self.Teleports["Cave Entrance"][1])
            end
            task.wait(1)
          end
          self:FollowPath(Destination)
          self:ClearVisualization()
          task.wait(2.5)
          table.remove(self.Queue, i)
          break
        else
          if not Destination:FindFirstAncestor("DroppedItems") then table.remove(self.Queue, i) break end
          local Default, _Spawn, Cave = (HumanoidRootPart.Position - Destination.Position).Magnitude, (self.Teleports["Spawn"][2] - Destination.Position).Magnitude + 3,
          (self.Teleports["Cave Entrance"][2] - Destination.Position).Magnitude + 3
          if _Spawn < Default or Cave < Default then
            Path:ComputeAsync(HumanoidRootPart.Position, Destination.Position)
            if #Path:GetWaypoints() > 1 then
              if _Spawn <= Cave then
                self:TouchPart(self.Teleports["Spawn"][1])
              else
                self:TouchPart(self.Teleports["Cave Entrance"][1])
              end
              task.wait(1)
            end
          end
          self:FollowPath(Destination.Position, true, Destination)
          self:ClearVisualization()
          if not AutoWalking then break end
          if (Character.HumanoidRootPart.Position - Destination.Position).Magnitude > 15 then table.remove(self.Queue, i) break end
          if Destination:FindFirstChildOfClass("ProximityPrompt") then
            local ParentsName, ItemName, TotalItem, oldTick, success = Destination.Parent and Destination.Parent.Name, "{N/A}", "{N/A}", tick(), true
            repeat
              self:FireAllProximityPrompts()
              task.wait(.15)
              if tick() - oldTick >= 5 then success = false break end
            until not Destination:FindFirstAncestor("DroppedItems")
            if ParentsName ~= "DroppedItems" then
              ItemName = ParentsName
            else
              ItemName = Destination.Name
            end
            for _, Item in Items:GetChildren() do
              if Item.Name ~= ItemName then continue end
              TotalItem = Item.ItemAmount.Text:gsub("x", "")
            end
            if success then
              sendToWebhook({
                title = "Item Collected",
                description = string.format("Collected `%s`", ItemName),
                fields = {
                  {
                    ["name"] = string.format("Total %ss", ItemName),
                    ["value"] = string.format("`%s`", tostring(TotalItem))
                  }
                }
              }, "item")
            else
              sendToWebhook({
                title = "Item failed to collect",
                description = string.format("Didnt collect `%s`", ItemName),
                fields = {
                  {
                    ["name"] = string.format("Total %ss", ItemName),
                    ["value"] = string.format("`%s`", tostring(TotalItem))
                  }
                },
                color = tonumber(0xff0000)
              }, "item")
            end
          end
          table.remove(self.Queue, i)
          break
        end
      end
    end
    end)
    RunService.PreSimulation:Connect(function()
    if self.Jumping then
      if Humanoid.FloorMaterial ~= Enum.Material.Air then
        Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
      end
    end
    end)
    return self
  end
})

local AutoWalkAgent = AutoWalk()
task.spawn(function()
while true do
  if BasicBlessing.Bits.Enabled and (not table.find(AutoWalkAgent.Queue, Vector3.new(173, 93, 281))) then
    AutoWalkAgent:AddToQueue(Vector3.new(173, 93, 281))
  end
  task.wait(3)
end
end)
for _, item in DroppedItems:GetChildren() do
  AutoWalkAgent:AddToQueue(item)
end
DroppedItems.ChildAdded:Connect(function(Item)
AutoWalkAgent:AddToQueue(Item)
end)

task.spawn(function()
while task.wait(1) do
  for _, Item in Items:GetChildren() do
    if Item.Name == "UIGridLayout" or not table.find(ToUse, Item.Name) then continue end
    local Amount = Item.ItemAmount.Text:gsub("x", "")
    if not tonumber(Amount) then continue end
    --UseItem:FireServer(Item.Name, Amount)
    for _ = 1, Amount do
      UseItem:FireServer(Item.Name, 1)
    end
  end
end
end)
task.spawn(function()
while task.wait(1) do
  if ServerInfo:GetAttribute("CurrentBiome") == CurrentBiome then continue end
  CurrentBiome = ServerInfo:GetAttribute("CurrentBiome")
  local ServerType = ServerInfo:GetAttribute("IsPublicServer") == true and "`Public`" or "`Private`"
  sendToWebhook({
    title = "Biome Changed",
    description = "Current Biome is `" .. tostring(CurrentBiome) .. "`",
    fields = {
      {
        ["name"] = "Time",
        ["value"] = "`" .. tostring(ServerInfo:GetAttribute("CurrentTime") .. "`")
      },
      {
        ["name"] = "Server Type",
        ["value"] = ServerType
      },
      {
        ["name"] = "Join Code",
        ["value"] = ServerType == "`Private`" and "`{Private Server}`" or string.format("```Roblox.GameLauncher.joinGameInstance(%s, \"%s\")```", tostring(game.PlaceId), tostring(game.JobId))
      }
    },
    color = tonumber(0x5555FF)
  }, "biome")
end
end)
local Window = Fluent:CreateWindow({
  Title = "Sol's RNG",
  SubTitle = "by Askien",
  TabWidth = 160,
  Size = UDim2.fromOffset(580, 460),
  Acrylic = true,
  Theme = "Dark",
  MinimizeKey = Enum.KeyCode.LeftAlt
})

local Tabs = {
  Main = Window:AddTab({ Title = "Main", Icon = "" }),
  Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
  Credits = Window:AddTab({ Title = "Credits", Icon = "" }),
  Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
  local Toggle = Tabs.Main:AddToggle("Toggle for autoItems", {Title = "Auto Collect Items", aDefault = false })
  Toggle:OnChanged(function(Value)
  getgenv().AutoWalking = Value
  end)
  local Toggle1 = Tabs.Main:AddToggle("Toggle for autoItems", {Title = "Webhook for items", aDefault = false })
  Toggle1:OnChanged(function(Value)
  getgenv().WEBHOOK_ItemNotifier = Value
  end)
  local Toggle2 = Tabs.Main:AddToggle("Toggle for autoItems", {Title = "Webhook for biomes", aDefault = false })
  Toggle2:OnChanged(function(Value)
  getgenv().WEBHOOK_BiomeNotifier = Value
  end)
  Tabs.Main:AddInput("Input", {
    Title = "Webhook",
    Default = "",
    Placeholder = "Type webhook here",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
    getgenv().WebhookURL = Value
  end
})
local MultiDropdownz = Tabs.Main:AddDropdown("MultiDropdown", {
  Title = "Items",
  Description = "Choose skills for using",
  Values = items,
  Multi = true,
  Default = {},
})
Tabs.Credits:AddParagraph({
  Title = "It uses chosen skills, no toggle",
  Content = ""
})
MultiDropdownz:OnChanged(function(Valueg)
for Valueg, State in next, Valueg do
  table.insert(getgenv().ToUse, Valueg)
end
end)

Tabs.Credits:AddParagraph({
  Title = "Creator",
  Content = "All credits to .askien on discord."
})
Tabs.Credits:AddButton({
  Title = "Copy dis invite",
  Description = "Self explanatory",
  Callback = function()
  setclipboard("https://discord.gg/KV2prFr7DC")
end
})
Tabs.Misc:AddButton({
Title = "Infinite yield",
Description = "Executes infinite yield admin",
Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
end
})
end
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("AskienHub")
SaveManager:SetFolder("AskienHub/Sol's-RNG")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
Window:SelectTab(1)
Fluent:Notify({
Title = "AskienHub",
Content = "The script has been loaded.",
Duration = 3
})
SaveManager:LoadAutoloadConfig()
